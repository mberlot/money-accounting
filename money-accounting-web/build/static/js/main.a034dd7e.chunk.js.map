{"version":3,"sources":["configs/networkConfig.js","actions/account.js","reducers/account.js","reducers/index.js","configs/store.js","components/currentBalance.js","components/transacctions.js","components/home.js","App.js","reportWebVitals.js","index.js"],"names":["api","axios","create","baseURL","timeout","Number","CancelToken","isCancel","getCurrentBalanceRequest","createAction","getCurrentBalanceSuccess","getCurrentBalanceFailed","newTransactionRequest","newTransactionSuccess","newTransactionFailed","getCurrentBalance","dispatch","a","get","response","accountInfo","data","newTransaction","amount","type","post","FetchState","initialState","fetchState","errorMessage","handleActions","state","action","payload","error","allReducers","combineReducers","account","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","cacheEnhancer","persistor","persistStore","transactionType","schema","yup","shape","positive","integer","required","CurrentBalance","currentMoney","useState","show","setShow","transaction","setTransaction","setAmount","useDispatch","useForm","resolver","yupResolver","register","handleSubmit","errors","handleClose","handleShow","confirmTransaction","className","Button","variant","onClick","Modal","onHide","onSubmit","Header","Body","InputGroup","Prepend","Text","FormControl","onChange","event","target","value","name","min","ref","maxLength","Append","message","Footer","Transactions","transactions","useSelector","Spinner","animation","role","length","Table","striped","bordered","hover","map","item","index","effectiveDate","Home","props","useEffect","App","loading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a034dd7e.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'http://localhost:3001',\n    timeout: Number(60000),\n});\n\napi.CancelToken = axios.CancelToken;\napi.isCancel = axios.isCancel;\n\nexport { api };\n\n","import { createAction } from 'redux-actions';\nimport { api } from '../configs/networkConfig';\n\nexport const getCurrentBalanceRequest = createAction('REQUEST_CURRENT_BALANCE');\nexport const getCurrentBalanceSuccess = createAction('REQUEST_CURRENT_BALANCE_SUCCESS');\nexport const getCurrentBalanceFailed = createAction('REQUEST_CURRENT_BALANCE_FAILED');\nexport const newTransactionRequest = createAction('REQUEST_NEW_TRANSACTION');\nexport const newTransactionSuccess = createAction('REQUEST_NEW_TRANSACTION_SUCCESS');\nexport const newTransactionFailed = createAction('REQUEST_NEW_TRANSACTION_FAILED');\n\nexport const getCurrentBalance = () => async (dispatch) => {\n    dispatch(getCurrentBalanceRequest());\n    try {\n        const response = await api.get('/currentBalance');\n        dispatch(getCurrentBalanceSuccess({ accountInfo: response.data.accountInfo }));\n    }\n    catch(err) {\n        dispatch(getCurrentBalanceFailed(err));\n    }\n};\n\n\nexport const newTransaction = (amount, type) => async (dispatch) => {\n    dispatch(newTransactionRequest());\n    try {\n        const response = await api.post('/newTransaction', {\n            amount,\n            type\n        });\n        dispatch(newTransactionSuccess());\n    }\n    catch(err) {\n        dispatch(newTransactionFailed(err));\n    }\n};\n","import { handleActions } from 'redux-actions';\nimport {\n    getCurrentBalanceRequest,\n    getCurrentBalanceSuccess,\n    getCurrentBalanceFailed,\n    newTransactionRequest,\n    newTransactionSuccess,\n    newTransactionFailed\n} from '../actions/account';\n\nconst FetchState = {\n    NOT_FETCHED: 'NOT_FETCHED',\n    FETCHING: 'FETCHING',\n    FETCHED: 'FETCHED',\n};\n\nconst initialState = {\n    fetchState: FetchState.NOT_FETCHED,\n    accountInfo: {},\n    errorMessage: ''\n};\n\nexport default handleActions({\n        [getCurrentBalanceRequest]: state => ({ ...state, fetchState: FetchState.FETCHING }),\n        [getCurrentBalanceSuccess]: (state, action) => ({\n            ...state,\n            ...action.payload,\n            fetchState: FetchState.FETCHED,\n            errorMessage: initialState.error,\n        }),\n        [getCurrentBalanceFailed]: (state, action) => ({\n            ...state,\n            fetchState: FetchState.FETCHED,\n            errorMessage: action.payload,\n        }),\n        [newTransactionRequest]: state => ({ ...state, fetchState: FetchState.FETCHING }),\n        [newTransactionSuccess]: (state) => ({\n            ...state,\n            fetchState: FetchState.FETCHED,\n            errorMessage: initialState.error,\n        }),\n        [newTransactionFailed]: (state, action) => ({\n            ...state,\n            fetchState: FetchState.FETCHED,\n            errorMessage: action.payload,\n        }),\n    },\n    initialState);\n","import account from \"./account\";\nimport { combineReducers } from 'redux';\n\nconst allReducers = combineReducers({\n    account\n});\n\n/**\n * Exports a root reducer on top of the App Reducer to be able to reset it's\n * state to its initial\n * @param state\n * @param action\n * @returns {any}\n */\nexport default (state, action) => {\n    return allReducers(state, action);\n};\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducers from '../reducers';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\nimport { cacheEnhancer } from \"redux-cache\";\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['']\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducers);\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(\n    persistedReducer,\n    composeEnhancers(applyMiddleware(thunk), cacheEnhancer())\n);\n\nexport const persistor = persistStore(store);\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport {useDispatch} from \"react-redux\";\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from \"yup\";\nimport { newTransaction, getCurrentBalance }  from '../actions/account';\n\n\nconst transactionType = {\n    DEBIT: 'DEBIT',\n    CREDIT: 'CREDIT'\n};\n\nconst schema = yup.object().shape({\n    amount: yup.number().positive().integer().required(),\n});\n\nconst CurrentBalance = ({ currentMoney }) => {\n\n    const [show, setShow] = useState(false);\n    const [transaction, setTransaction] = useState('');\n    const [amount, setAmount] = useState('');\n    const dispatch = useDispatch();\n    const { register, handleSubmit, errors } = useForm({\n        resolver: yupResolver(schema)\n    });\n\n    const handleClose = () => setShow(false);\n\n    const handleShow = (type) => {\n        setShow(true);\n        setTransaction(type);\n    }\n\n    const confirmTransaction = async () => {\n        await dispatch(newTransaction(amount, transaction));\n        setShow(false);\n        dispatch(getCurrentBalance());\n    }\n\n    return (\n        <>\n            <div className='pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center'>\n                <h1 className='display-4'>${currentMoney}</h1>\n                <p className='text-muted'>Current balance</p>\n                <Button variant=\"outline-dark\" onClick={() => handleShow(transactionType.CREDIT)}>Credit</Button>{' '}\n                <Button variant=\"outline-dark\" onClick={() => handleShow(transactionType.DEBIT)}>Debit</Button>\n            </div>\n            <Modal show={show} onHide={handleClose}>\n                <form onSubmit={handleSubmit(confirmTransaction)}>\n                    <Modal.Header>{transaction}</Modal.Header>\n                    <Modal.Body>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>$</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl onChange={event => setAmount(event.target.value)} name='amount' type='number' min='1' ref={register({ required: true, maxLength: 20, min: 1})} />\n                            <InputGroup.Append>\n                                <InputGroup.Text>.00</InputGroup.Text>\n                            </InputGroup.Append>\n                        </InputGroup>\n                        <p>{errors.amount?.message}</p>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            Close\n                        </Button>\n                        <Button type=\"submit\">\n                            Apply\n                        </Button>\n\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        </>\n    );\n}\n\nexport default CurrentBalance;\n","import React from \"react\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport {useSelector} from \"react-redux\";\nimport Table from \"react-bootstrap/Table\";\n\nconst FetchState = {\n    NOT_FETCHED: 'NOT_FETCHED',\n    FETCHING: 'FETCHING',\n    FETCHED: 'FETCHED',\n};\n\nconst transactionType = {\n    DEBIT: 'DEBIT',\n    CREDIT: 'CREDIT'\n};\n\nconst Transactions = ({ transactions }) => {\n    const account = useSelector( state => state.account.accountInfo );\n    const fetchState = useSelector( state => state.account.fetchState );\n\n    return (\n      <>\n          {fetchState === FetchState.FETCHING &&\n              <Spinner animation=\"border\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n              </Spinner>\n          }\n          {fetchState === FetchState.FETCHED && account.transaction && account.transaction.length > 0 &&\n              <Table striped bordered hover>\n                  <thead>\n                  <tr>\n                      <th>Date</th>\n                      <th>Type</th>\n                      <th>Amount</th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  {account.transaction && account.transaction.length > 0 && account.transaction.map((item, index) => {\n                      return (\n                          <tr key={index}>\n                              <td>{item.effectiveDate}</td>\n                              <td><span className={(item.type === transactionType.DEBIT) ? \"badge badge-pill badge-primary\" : \"badge badge-pill badge-dark\"}>{item.type}</span></td>\n                              <td>{item.amount}</td>\n                          </tr>\n                      )\n                  })}\n                  </tbody>\n              </Table>\n          }\n          {fetchState === FetchState.FETCHED && account.transaction && account.transaction.length === 0 &&\n          <p>There is no movement into your account.</p>\n          }\n      </>\n    );\n}\n\nexport default Transactions;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCurrentBalance }  from '../actions/account';\nimport CurrentBalance from \"./currentBalance\";\nimport Transactions from \"./transacctions\";\n\nconst Home = props => {\n\n    const dispatch = useDispatch();\n    const account = useSelector( state => state.account.accountInfo );\n\n    useEffect(() => {\n        dispatch(getCurrentBalance());\n    },[dispatch]);\n\n    return (\n        <div className='container'>\n\n            <CurrentBalance\n                currentMoney={account.currentMoney}\n            />\n            <Transactions/>\n        </div>\n    );\n}\n\nexport default Home;\n","import './App.css';\nimport React from \"react\";\nimport { store, persistor } from './configs/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport Home from './components/home';\n\nfunction App() {\n  return (\n      <Provider store={store}>\n          <PersistGate loading={null} persistor={persistor}>\n            <div className=\"App\">\n                  <Home/>\n            </div>\n          </PersistGate>\n      </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}